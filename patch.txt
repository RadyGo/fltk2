Index: fluid/code.cxx
===================================================================
--- fluid/code.cxx	(revision 10219)
+++ fluid/code.cxx	(working copy)
@@ -159,7 +159,7 @@
   if (varused_test) return;
   const char *e = w+length;
   int linelength = 1;
-  putc('\"', code_file);
+  fputs("_(\"", code_file);
   for (; w < e;) {
     int c = *w++;
     switch (c) {
@@ -215,7 +215,7 @@
       break;
     }
   }
-  putc('\"', code_file);
+  fputs("\")", code_file);
 }
 
 // write an array of C characters in a decimal format
@@ -390,6 +390,7 @@
 
 void FluidType::write_code() {
   write_h("// Header for %s\n", title());
+  write_h("#include \"core/mrvI8N.hÌ£\"");
   write_c("// Code for %s\n", title());
 }
 
Index: src/FloatInput.cxx
===================================================================
--- src/FloatInput.cxx	(revision 10219)
+++ src/FloatInput.cxx	(working copy)
@@ -57,9 +57,9 @@
   for (int n = 0; n < ilen; n++) {
     char ascii = text[n];
     compose_reset(); // ignore any foreign letters...
-    
+  
     // Allow only one '.' in FLOAT inputs
-    if (type()==FLOAT && ascii=='.') {
+    if (type()==FLOAT && (ascii=='.' || ascii==',')) {
       if (!strchr(this->text(), ascii))
         continue;
     } else
@@ -69,7 +69,7 @@
 	(b+n==1 && (at(0)=='0'||text[0]=='0') && (ascii=='x' || ascii == 'X')) ||
 	(b+n>1 && (at(0)=='0'||text[0]=='0') && ((at(1)=='x'||text[1]=='x')||(at(1)=='X'||text[1]=='X'))
 	 && ((ascii>='A'&& ascii<='F') || (ascii>='a'&& ascii<='f'))) ||
-	(type()==FLOAT && ascii && strchr(".eE+-", ascii)))
+	(type()==FLOAT && ascii && strchr(",.eE+-", ascii)))
       continue; // it's ok;    
     return false;
   }
Index: src/Group.cxx
===================================================================
--- src/Group.cxx	(revision 10219)
+++ src/Group.cxx	(working copy)
@@ -56,6 +56,8 @@
 
 */
 
+#include <iostream>
+
 #include <config.h>
 #include <fltk/Window.h>
 #include <fltk/Box.h>
Index: src/Input.cxx
===================================================================
--- src/Input.cxx	(revision 10219)
+++ src/Input.cxx	(working copy)
@@ -23,6 +23,8 @@
 //    http://www.fltk.org/str.php
 //
 
+#include <iostream>
+
 #include <fltk/Input.h>
 #include <fltk/events.h>
 #include <fltk/damage.h>
Index: src/InputBrowser.cxx
===================================================================
--- src/InputBrowser.cxx	(revision 10219)
+++ src/InputBrowser.cxx	(working copy)
@@ -37,6 +37,10 @@
 #include <stdio.h>
 #include <string.h>
 
+#include <iostream>
+
+#define DBG(x) std::cerr << __FILE__ << " " << __FUNCTION__ << " " << x << std::endl;
+
 using namespace fltk;
 static Input *ibinput;
 
@@ -90,6 +94,7 @@
   switch (event) {
   case MOVE:
   case DRAG:
+  case PUSH:
   case RELEASE:
   case KEY:
     return browser->handle(event);
@@ -204,6 +209,7 @@
       && event_key() != KeypadEnter
       && event_key() != ' ')
     return;
+
   Widget *item = browser->item();
 
   if (!item) return;
@@ -468,6 +474,7 @@
 
   win->exec(0, true);
 
+
   if(type()&NONEDITABLE) throw_focus();
   else fltk::focus(m_input);
 
Index: src/NumericInput.cxx
===================================================================
--- src/NumericInput.cxx	(revision 10219)
+++ src/NumericInput.cxx	(working copy)
@@ -82,7 +82,7 @@
       // strip trailing 0's and the period:
       char *s = buf; while (*s) s++; s--;
       while (s>buf && *s=='0') s--;
-      if (*s=='.') s--;
+      if (*s=='.' || *s==',') s--;
       s[1] = 0;
     }
   }
@@ -156,13 +156,13 @@
   else if (mark() < q) q = q - 1;
 
   // make insertion after decimal point work:
-  if (at(q) == '.') q++;
+  if (at(q) == '.' || at(q) == ',') q++;
 
   // add trailing ".0" if cursor is on end of number:
   if (at(q) < '0' || at(q) > '9') {
     for (int g = q-1;;g--) {
       // search to see if decimal point is already there:
-      if (g >= 0 && at(g) == '.') break;
+        if (g >= 0 && ( at(g) == '.' || at(g) == ',' ) ) break;
       if (g < 0 || at(g) < '0' || at(g) > '9') {
 	// if no digits before cursor, assumme we are not pointing at a number:
 	if (g >= q-1) goto DONE;
@@ -180,7 +180,7 @@
   for (p = q-1; p >= 0; p--) {
     c = at(p);
     if (c == '-') {dir = -dir; break;}
-    if (c != '.' && (c < '0' || c > '9')) break;
+    if (( c != '.' || c != ',' ) && (c < '0' || c > '9')) break;
   }
 
   if (dir > 0) {
@@ -188,7 +188,7 @@
     // up to a larger absolute value, which is much simpler:
     for (p = q; p >= 0; p--) {
       c = at(p);
-      if (c == '.') continue;
+      if (c == '.' || c == ',') continue;
       if (c < '0' || c > '9') break;
       if (c < '9') {
 	replace(p, p+1, c+1);
@@ -203,7 +203,8 @@
     // down to a smaller absolute value:
     // first check if all the digits are zero, if so we reverse the sign:
     for (p = q; ; p--) {
-      if (p < 0 || ((at(p) < '0' || at(p) > '9') && at(p) != '.')) {
+        if (p < 0 || ((at(p) < '0' || at(p) > '9') && 
+                      (at(p) != '.') || (at(p) != ',' ))) {
 	if (p >= 0 && at(p) == '-') {
 	  Input::replace(p, p+1, 0,0);
 	  q--;
@@ -213,12 +214,12 @@
 	}
 	goto UP_CASE;
       }
-      if (at(p) != '.' && at(p) != '0') break;
+      if (at(p) != '.' && at(p) != ',' && at(p) != '0') break;
     }
 
     for (p = q; p >= 0; p--) {
       c = at(p);
-      if (c == '.') continue;
+      if (c == '.' || c == ',') continue;
       if (c < '0' || c > '9') break;
       if (c == '1') {
 	// delete leading zeros:
Index: src/SharedImage.cxx
===================================================================
--- src/SharedImage.cxx	(revision 10219)
+++ src/SharedImage.cxx	(working copy)
@@ -109,6 +109,7 @@
   }
 }
 
+
 SharedImage* SharedImage::find(SharedImage* image, const char* name) {
   if(image == 0) return 0;
   int c = strcmp(name, image->name);
@@ -185,7 +186,7 @@
   if (memcmp(header, "BM", 2) == 0)	// BMP file
       img = bmpImage::get(n);
   else if (memcmp(header, "GIF87a", 6) == 0 ||
-      memcmp(header, "GIF89a", 6) == 0)	// GIF file
+	   memcmp(header, "GIF89a", 6) == 0)	// GIF file
     img = gifImage::get(n);
   else {
     // Not a standard format; try an image handler...
Index: src/file_chooser.cxx
===================================================================
--- src/file_chooser.cxx	(revision 10219)
+++ src/file_chooser.cxx	(working copy)
@@ -124,6 +124,7 @@
 # endif
 #endif
 
+
 /*!
   \image html filechooser.gif
 
@@ -176,6 +177,7 @@
     OPENFILENAMEW wreq;
     static char ret[PATH_MAX];
 
+
     // Convert all input to wide-char format.
     length = utf8towc(message, strlen(message), NULL, 0);
     messageW = new wchar_t [length+1];
Index: src/win32/run.cxx
===================================================================
--- src/win32/run.cxx	(revision 10219)
+++ src/win32/run.cxx	(working copy)
@@ -1665,9 +1665,9 @@
 
   case WM_MOUSEWHEEL: {
     static int ydelta = 0; // running total of all motion
-    ydelta -= (SHORT)(HIWORD(wParam));
+    ydelta -= GET_Y_LPARAM(wParam));
     if ((e_dy = ydelta / WHEEL_DELTA)) {
-      if ((SHORT)(HIWORD(wParam)) < 0) {
+      if (GET_Y_LPARAM(wParam)) < 0) {
         e_keysym = WheelUp;
 	e_state |= BUTTON4;
       } else {
@@ -1681,11 +1681,10 @@
   }
 
   case WM_MOUSEHWHEEL: {
-	  puts("MOUSEHWHEEL!");
     static int xdelta = 0;
-    xdelta -= (SHORT)(HIWORD(wParam));
+    xdelta -= GET_X_LPARAM(wParam));
     if ((e_dx = xdelta / WHEEL_DELTA)) {
-      if ((SHORT)(HIWORD(wParam)) < 0) {
+      if (GET_X_LPARAM(wParam)) < 0) {
         e_keysym = WheelLeft;
 	e_state |= BUTTON6;
       } else {
Index: test/CubeViewUI.cxx
===================================================================
--- test/CubeViewUI.cxx	(revision 10219)
+++ test/CubeViewUI.cxx	(working copy)
@@ -1,9 +1,9 @@
-// generated by Fast Light User Interface Designer (fluid) version 2.0100
+// generated by Fast Light User Interface Designer (fluid) version 2.1000
 
 #include "CubeViewUI.h"
 
 inline void CubeViewUI::cb_zoom_i(fltk::ValueSlider* o, void*) {
-  cube->setsize((float) o->value());
+  cube->setsize(o->value());
   cube->redraw();
 }
 void CubeViewUI::cb_zoom(fltk::ValueSlider* o, void* v) {
@@ -11,7 +11,7 @@
 }
 
 inline void CubeViewUI::cb_vrot_i(fltk::ThumbWheel* o, void*) {
-  cube->v_angle((float) o->value());
+  cube->v_angle(o->value());
   cube->redraw();
 }
 void CubeViewUI::cb_vrot(fltk::ThumbWheel* o, void* v) {
@@ -19,7 +19,7 @@
 }
 
 inline void CubeViewUI::cb_ypan_i(fltk::Slider* o, void*) {
-  cube->pany((float) o->value());
+  cube->pany(o->value());
   cube->redraw();
 }
 void CubeViewUI::cb_ypan(fltk::Slider* o, void* v) {
@@ -27,7 +27,7 @@
 }
 
 inline void CubeViewUI::cb_xpan_i(fltk::Slider* o, void*) {
-  cube->panx((float) o->value());
+  cube->panx(o->value());
   cube->redraw();
 }
 void CubeViewUI::cb_xpan(fltk::Slider* o, void* v) {
@@ -35,7 +35,7 @@
 }
 
 inline void CubeViewUI::cb_hrot_i(fltk::ThumbWheel* o, void*) {
-  cube->h_angle((float) o->value());
+  cube->h_angle(o->value());
   cube->redraw();
 }
 void CubeViewUI::cb_hrot(fltk::ThumbWheel* o, void* v) {
@@ -46,6 +46,7 @@
   fltk::Window* w;
    {fltk::Window* o = mainWindow = new fltk::Window(415, 406, "CubeView");
     w = o;
+    o->shortcut(0xff1b);
     o->user_data((void*)(this));
     o->begin();
      {fltk::Group* o = new fltk::Group(3, 3, 409, 400);
@@ -112,7 +113,7 @@
           o->color((fltk::Color)56);
           o->selection_color((fltk::Color)69);
         }
-         {cube = new CubeView(2, 2, 329, 329);
+         {CubeView* o = cube = new CubeView(2, 2, 329, 329);
         }
         o->end();
       }
Index: test/CubeViewUI.h
===================================================================
--- test/CubeViewUI.h	(revision 10219)
+++ test/CubeViewUI.h	(working copy)
@@ -1,4 +1,4 @@
-// generated by Fast Light User Interface Designer (fluid) version 2.0100
+// generated by Fast Light User Interface Designer (fluid) version 2.1000
 
 #ifndef CubeViewUI_h
 #define CubeViewUI_h
Index: test/file_chooser.cxx
===================================================================
--- test/file_chooser.cxx	(revision 10219)
+++ test/file_chooser.cxx	(working copy)
@@ -278,7 +278,7 @@
 //
 // 'main()' - Create a file chooser and wait for a selection to be made.
 //
-#define SIMPLE_IMPL 0
+#define SIMPLE_IMPL 1
 int			// O - Exit status
 main(int  argc,		// I - Number of command-line arguments
      char *argv[])	// I - Command-line arguments
Index: test/radio.cxx
===================================================================
--- test/radio.cxx	(revision 10219)
+++ test/radio.cxx	(working copy)
@@ -1,9 +1,9 @@
-// generated by Fast Light User Interface Designer (fluid) version 2.0100
+// generated by Fast Light User Interface Designer (fluid) version 2.1000
 
 #include "radio.h"
 using namespace fltk;
 
-fltk::LightButton* ttlb;
+fltk::LightButton *ttlb=(fltk::LightButton *)0;
 
 static void cb_ttlb(fltk::LightButton*, void*) {
   Tooltip::enable(ttlb->value() ? true : false);
@@ -16,6 +16,7 @@
   fltk::Window* w;
    {fltk::Window* o = new fltk::Window(380, 274, "Radio buttons and Tooltips");
     w = o;
+    o->shortcut(0xff1b);
     o->tooltip("This is a window");
     o->begin();
      {fltk::Button* o = new fltk::Button(20, 10, 160, 25, "Button");
Index: test/radio.h
===================================================================
--- test/radio.h	(revision 10219)
+++ test/radio.h	(working copy)
@@ -1,4 +1,4 @@
-// generated by Fast Light User Interface Designer (fluid) version 2.0100
+// generated by Fast Light User Interface Designer (fluid) version 2.1000
 
 #ifndef radio_h
 #define radio_h
Index: themes/Alternative.cxx
===================================================================
--- themes/Alternative.cxx	(revision 10219)
+++ themes/Alternative.cxx	(working copy)
@@ -29,14 +29,15 @@
 #include <fltk/Style.h>
 #include <fltk/Widget.h>
 #include <fltk/Button.h>
+#include <fltk/damage.h>
 #include <fltk/draw.h>
 
 // a couple of of new boxtypes (look familiar?)
 static const fltk::FrameBox
-alt_thick_down_box(0, "NNUUJJXXAAAA");
+alt_thick_down_box(0, 0,0,16,16,"NNUUJJXXAAAA");
 
 static const fltk::FrameBox
-alt_thick_up_box(0, "AAAAXXJJUUNN", &alt_thick_down_box);
+alt_thick_up_box(0, 0,0,16,16,"AAAAXXJJUUNN", &alt_thick_down_box);
 
 enum {UPPER_LEFT, LOWER_RIGHT};
 
@@ -47,11 +48,15 @@
   if (d <= 1) return;
   fltk::setcolor(color);
   if (which == UPPER_LEFT) {
-    fltk::strokearc(x+w-d, y, d, d, 45, w<=h ? 180 : 90);
-    fltk::strokearc(x, y+h-d, d, d, w<=h ? 180 : 90, 225);
+    fltk::addarc(x+w-d, y, d, d, 45, w<=h ? 180 : 90);
+    fltk::strokepath();
+    fltk::addarc(x, y+h-d, d, d, w<=h ? 180 : 90, 225);
+    fltk::strokepath();
   } else { // LOWER_RIGHT
-    fltk::strokearc(x, y+h-d, d, d, 225, w<=h ? 360 : 270);
-    fltk::strokearc(x+w-d, y, d, d, w<=h ? 360 : 270, 360+45);
+    fltk::addarc(x, y+h-d, d, d, 225, w<=h ? 360 : 270);
+    fltk::strokepath();
+    fltk::addarc(x+w-d, y, d, d, w<=h ? 360 : 270, 360+45);
+    fltk::strokepath();
   }
   if (w < h) {
     if (which != UPPER_LEFT) fltk::drawline(x+w, y+d/2, x+w, y+h-d/2);
@@ -86,8 +91,9 @@
 //  d = (d - 1)|1;
     d &= (~1);
 
-    fltk::setcolor((f&fltk::VALUE) ? gfc : gbc);
-    fltk::fillpie(x+2, y+2, d-4, d-4, 0, 360);
+    fltk::setcolor((f&fltk::DAMAGE_VALUE) ? gfc : gbc);
+    fltk::addpie(fltk::Rectangle(x+2, y+2, d-4, d-4), 0, 360);
+    fltk::fillpath();
 
     lozenge(UPPER_LEFT,  x+2, y+1, d-4, d-2, light);
     lozenge(UPPER_LEFT,  x+1, y+2, d-2, d-4, light);
@@ -123,7 +129,7 @@
     fltk::newpath();
     fltk::addvertex(x+3, y1); fltk::addvertex(x1, y+3);
     fltk::addvertex(x+w-4, y1); fltk::addvertex(x1, y+h-4);
-    fltk::setcolor((f&fltk::VALUE) ? gfc : gbc);
+    fltk::setcolor((f&fltk::DAMAGE_VALUE) ? gfc : gbc);
     fltk::fillpath();
 
     fltk::setcolor(dark);
@@ -170,7 +176,7 @@
     case fltk::GLYPH_DOWN:
     JUMP1:
       {fltk::Color d1, d2, l1, l2;
-      if (f&(fltk::VALUE|fltk::SELECTED)) {
+      if (f&(fltk::DAMAGE_VALUE|fltk::SELECTED)) {
         d1 = fltk::GRAY99; d2 = fltk::GRAY85; l1 = fltk::BLACK; l2 = fltk::GRAY60;
       } else{
         l1 = fltk::GRAY99; l2 = fltk::GRAY85; d1 = fltk::BLACK; d2 = fltk::GRAY60;
@@ -222,7 +228,7 @@
       break;
     }
     default:
-      widget->buttonbox()->draw(x,y,w,h, bc, f);
+        widget->buttonbox()->draw(fltk::Rectangle(x,y,w,h));
   }
 }
 
@@ -242,20 +248,22 @@
   else if (f & fltk::HIGHLIGHT && (bc = widget->highlight_color())) ;
   else bc = widget->buttoncolor();
   if (widget->type() & 1) { // horizontal
-    widget->buttonbox()->draw(x,y,w,h, bc, f);
-    widget->buttonbox()->inset(x,y,w,h);
-    if (w>10) fltk::THIN_UP_BOX->draw(x+w/2-1, y+1, 2, h-2, bc, f);
+      fltk::Rectangle r( x,y,w,h );
+      widget->buttonbox()->draw(r);
+    widget->buttonbox()->inset(r);
+    if (w>10) fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+w/2-1, y+1, 2, h-2));
     if (w>18) {
-      fltk::THIN_UP_BOX->draw(x+w/2-1-4, y+1, 2, h-2, bc, f);
-      fltk::THIN_UP_BOX->draw(x+w/2-1+4, y+1, 2, h-2, bc, f);
+        fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+w/2-1-4, y+1, 2, h-2));
+        fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+w/2-1+4, y+1, 2, h-2));
     }
   } else {
-    widget->buttonbox()->draw(x,y,w,h, bc, f);
-    widget->buttonbox()->inset(x,y,w,h);
-    if (h>10) fltk::THIN_UP_BOX->draw(x+1, y+h/2-1, w-2, 2, bc, f);
+      fltk::Rectangle r( x,y,w,h );
+      widget->buttonbox()->draw(r);
+      widget->buttonbox()->inset(r);
+      if (h>10) fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+1, y+h/2-1, w-2, 2));
     if (h>18) {
-      fltk::THIN_UP_BOX->draw(x+1, y+h/2-1-4, w-2, 2, bc, f);
-      fltk::THIN_UP_BOX->draw(x+1, y+h/2-1+4, w-2, 2, bc, f);
+        fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+1, y+h/2-1-4, w-2, 2));
+        fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+1, y+h/2-1+4, w-2, 2));
     }
   }
 }
@@ -263,10 +271,10 @@
 static void choice_glyph(const fltk::Widget* widget, int,
                          int x,int y,int w, int h, fltk::Flags f)
 {
-  fltk::FLAT_BOX->draw(x,y,w,h,widget->color(),f);
-  int H = h/3;
-  int Y = y + (h-H)/2;
-  widget->buttonbox()->draw(x,Y,w,H,widget->buttoncolor(),f);
+    fltk::FLAT_BOX->draw(fltk::Rectangle(x,y,w,h));
+    int H = h/3;
+    int Y = y + (h-H)/2;
+    widget->buttonbox()->draw(fltk::Rectangle(x,Y,w,H));
 }
 
 static void light_glyph(const fltk::Widget* widget, int,
@@ -274,8 +282,8 @@
 {
   fltk::Color fc = fltk::inactive(widget->textcolor(), f);
   fltk::Color bc = widget->color();
-  fltk::DOWN_BOX->draw(x+2, y, w-4, h, bc, f&(~fltk::VALUE));
-  fltk::THIN_UP_BOX->draw(x+4, y+2, w-8, h-4, f&fltk::VALUE ? fc : bc, f&(~fltk::VALUE));
+  fltk::DOWN_BOX->draw(fltk::Rectangle(x+2, y, w-4, h));
+  fltk::THIN_UP_BOX->draw(fltk::Rectangle(x+4, y+2, w-8, h-4));
 }
 
 static void return_glyph(const fltk::Widget*, int,
Index: themes/KDE.cxx
===================================================================
--- themes/KDE.cxx	(revision 10219)
+++ themes/KDE.cxx	(working copy)
@@ -34,6 +34,7 @@
 #include <fltk/Widget.h>
 #include <fltk/draw.h>
 #include <fltk/Monitor.h>
+#include <fltk/Font.h>
 #include <fltk/events.h>
 #include <stdio.h>
 #include <fltk/string.h>
@@ -128,9 +129,9 @@
   char fontname[64] = "";
   if ( (p = strtok_r(s, ",", &sv)) ) {
     // Turn "adobe-foobar" into just "foobar":
-    char* q = strchr(p, '-');
-    if (q) p = q+1;
-    strncpy(fontname, p, sizeof(fontname));
+      const char* q = strchr(p, '-');
+      if (q) p = q+1;
+      strncpy(fontname, p, sizeof(fontname));
   }
 
   // Read point size field:
@@ -158,8 +159,8 @@
   }
   // next two fields are the weight and slant:
   int attrib = 0;
-  if ( (p = strtok_r(0, ",", &sv)) && atoi(p) >= 75 ) attrib = BOLD;
-  if ( (p = strtok_r(0, ",", &sv)) && atoi(p) > 0 ) attrib |= ITALIC;
+  if ( (p = strtok_r(0, ",", &sv)) && atoi(p) >= 75 ) attrib = fltk::BOLD;
+  if ( (p = strtok_r(0, ",", &sv)) && atoi(p) > 0 ) attrib |= fltk::ITALIC;
 
   return fltk::font(fontname, attrib);
 }
@@ -477,6 +478,13 @@
   return true;
 }
 
+
+int main()
+{
+    fltk_theme();
+    return 0;
+}
+
 //
 // End of "$Id$".
 //
